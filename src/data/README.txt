LG1、LG2 是one和two多基因组比对保守性得到的bw文件经过bedGraph差异性比较之后产生结果的不同染色体

*_range 是原版本产生的文件数据。*_diff 是经过原版本精简之后的数据，不包括起始和终止位置的数据，仅是包括连续的差额值。



要求统计的是 bedgraph 文件当中有哪些基因位点是连续的？这些连续的基因位点起始终止位置是分别是多少？也即根据 bedgraph 文件的特征，针对每个染色体统计连续的染色体位点，其起始和终止位置值的差额在对应范围内有多少个，也即次数是多少？

解释：bedGraph文件 -> （经过NioHandlerTwo.java分析）out_diff.csv -> （经过js分析统计对应起始和终止位置值的差额在对应范围内有多少个）也即次数多少？（附带对应范围内的中位数与范围下限差值是多少？）

bedgraph 文件的特点如下：
chromA  chromStartA  chromEndA  dataValue
分别为：
染色体号
起始位点：染色体坐标从 0 开始，这意味着第一个染色体位置为0，而长度为N的染色体的最后位置将为N-1。
终止位点
数据值：数据值可以是整数或实数，正值或负值。输入数据中列出的位置必须按数字顺序，并且仅会绘制指定位置的图。

这个问题已写成 Java 程序 NioHandlerTwo.java，并统计好了，最终会生成一个 out_range.txt 文件（输入是任意一个染色体的bedGraph文件，或者多个染色体的bedGraph文件，推荐使用前者，效率更高。输出是一个csv文件，即更新之后生成的四列数据）。这个文件共有三列，第一列即为对应的染色体名称，第二列和第三列即为对应染色体的连续的基因起始终止位置。注：并且可以根据最终集合的大小统计出连续的这个起始终止位置有多少个，也即为次数。

更新：目前将生成的out_range.txt文件改成了out_range.csv命名格式了，并增加了一列，也即为第四列，前三列所表示的含义跟上面一样，第四列表示的是起始和终止位置差值的绝对值。out_diff.csv是针对out_range.csv文件的精简，只保留了第一列和对应第四列的值。

但 Java 程序读取的 bedgraph 文件如果过大将会出现内存溢出，而且还有一些编码的未知错误，内存溢出的问题可以将输入的参数只针对一个染色体的 bedgraph 文件进行输入处理，也只是只有几十 MB，但即使这样，也比较慢，而且还可能存在未知的编码错误；所以事后可以将此 Java 程序改成对应的 shell 脚本进行完成此次数的统计。

